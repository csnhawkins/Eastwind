# This is a basic workflow to help you get started with Actions

name: Westwind GitHub Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
  push:
    branches:
      - release
      - 'migrations/**'


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  RELEASE_PREVIEW: 'Release-Preview.sql'
  BUILD_NAME: 'Build'
  REPORTS: 'Reports.html'
  REPORTS_DISPLAY_NAME: 'Reports'
  FLYWAY_DOCKER_IMAGE: redgate/flyway:latest-azure                                         #https://hub.docker.com/r/flyway/flyway
  FLYWAY_DOCKER_CONTAINER_NAME: flyway-container                                                #The name to provide to any Docker Container created
  FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrects > Actions section
  FLYWAY_MIGRATIONS_PATH: $GITHUB_WORKSPACE/migrations
  FLYWAY_CONFIG_FILES: "$GITHUB_WORKSPACE"
  FLYWAY: docker run --rm -v "$FLYWAY_MIGRATIONS_PATH":/flyway/sql -v "$FLYWAY_CONFIG_FILES/$stage":/flyway/conf $FLYWAY_DOCKER_IMAGE flyway -user="$userName" -password="$password" -licenseKey="$FLYWAY_LICENSE_KEY"
  DOCKERCOMMAND: $FLYWAY

  # If the first undo script is U002, this will validate all undo scripts up to and including that
  FIRST_UNDO_SCRIPT: 002_20221219161510
  # This number should always be just below the first migration script
  ABOVE_BASELINE_VERSION: '001.20220421100464'
  
  ACTIONS_RUNNER_DEBUG: true


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: 'build' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    env:
      stage: 'Build'
      # Environment Secrets - Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrects > Actions section, specially related to the environment in question) #
      databaseName: ${{ secrets.databaseName}} 
      JDBC: ${{ secrets.JDBC }} 
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      # End of Environment Secrets #
      displayName: 'Build'
      executeBuild: false
      publishArtifacts: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Test Flyway Command using Variable
        run: |
          echo "The Flyway Command is - $FLYWAY"
          echo "The Docker Command is - $DOCKERCOMMAND"
          echo "Starting Flyway Migrate"
          $FLYWAY info migrate info -url="$JDBC" -cleanDisabled='false'
      
      # Runs the Flyway Clean command within a Docker Container against the Build database
      - name: Clean Build DB
        if: env.executeBuild == 'true'
        run: |
          docker run --rm -v "$GITHUB_WORKSPACE/migrations":/flyway/migrations -v "$GITHUB_WORKSPACE":/flyway/conf $FLYWAY_DOCKER_IMAGE flyway -user="$userName" -password="$password" -licenseKey="$FLYWAY_LICENSE_KEY" info clean info -url="$JDBC" -cleanDisabled='false'
        
      # Runs the Flyway Migrate command within a Docker Container against the Build database
      - name: Migrate Build DB
        if: env.executeBuild == 'true'
        run: |
          docker run --rm -v "$GITHUB_WORKSPACE/migrations":/flyway/migrations -v "$GITHUB_WORKSPACE":/flyway/conf $FLYWAY_DOCKER_IMAGE flyway -user="$userName" -password="$password" -licenseKey="$FLYWAY_LICENSE_KEY" info migrate info -url="$JDBC" -cleanDisabled='false'
          
      # Runs the Flyway Undo command within a Docker Container against the Build database
      - name: undo Build DB
        if: env.executeBuild == 'true'
        run: |
          docker run --rm -v "$GITHUB_WORKSPACE/migrations":/flyway/migrations -v "$GITHUB_WORKSPACE":/flyway/conf $FLYWAY_DOCKER_IMAGE flyway -user="$userName" -password="$password" -licenseKey="$FLYWAY_LICENSE_KEY" info undo info -url="$JDBC" -cleanDisabled='false' -target="$FIRST_UNDO_SCRIPT"

       # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R $GITHUB_WORKSPACE/migrations flyway/

      
      #After migration scripts are validated, publish them as an artifact
      - name: Publish Validated Migration Scripts as Artifact
        if: env.publishArtifacts == 'true'
        uses: actions/upload-artifact@v3.1.1
        with: 
          name: flyway-build-artifact
          path: flyway/

  prod-preparation:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured
      if: ${{ false }} #Set this variable to false to temporarily disable the job
      needs: build
      env:
        stage: 'Prod'
        # Environment Secrets - Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrects > Actions section, specially related to the environment in question) #
        databaseName: ${{ secrets.databaseName}}
        JDBC: ${{ secrets.JDBC }}
        userName: ${{ secrets.userName }}
        password: ${{ secrets.password }}
        check_JDBC: ${{ secrets.check_JDBC }} 
        check_userName: ${{ secrets.check_userName }}
        check_password: ${{ secrets.check_password }} 
        # End of Environment Secrets #
        displayName: 'Deploy Prod'
        generateDriftAndChangeReport: true
        failReleaseIfDriftDetected: false
        staticCodeAnalysis: false #Currently not setup in this pipeline
        publishArtifacts: true

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3

        # Runs the Flyway Clean command within a Docker Container against the Build database
        - name: Echo Commands
          if: ${{ true }}
          run: |
            echo "The Flyway Environment Variable is - Username is $userName - Password is $password - JDBC is $JDBC - And Flyway Command is $FLYWAY"
            echo $env
          
        # Runs the Flyway Migrate command within a Docker Container against the Build database
        - name: Create Check Reports
          if: env.generateDriftAndChangeReport == 'true'
          run: |
            docker run --rm -v "$GITHUB_WORKSPACE/migrations":/flyway/migrations -v "$GITHUB_WORKSPACE":/flyway/conf -v "$GITHUB_WORKSPACE/reports":/flyway/reports $FLYWAY_DOCKER_IMAGE flyway -user="$userName" -password="$password" -licenseKey="$FLYWAY_LICENSE_KEY" check -dryrun -changes -drift -check.failOnDrift="$failReleaseIfDriftDetected" -check.buildUrl="$check_JDBC" -check.buildUser="$check_userName" -check.buildPassword="$check_password" -url="$JDBC" -check.reportFilename="/flyway/reports/$databaseName-Run-$GITHUB_RUN_ID-Check-Report.html"

         # Create a directory to stage the artifact files
        - name: Stage files for publishing
          if: env.publishArtifacts == 'true'
          run: |
            cp -R $GITHUB_WORKSPACE/reports flyway/

        - name: Publish Check Report as Artifact
          uses: actions/upload-artifact@v2
          with: 
            name: flyway-reports
            path: flyway/


  prod:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    if: ${{ false }} #Set this variable to false to temporarily disable the job
    needs: prod-preparation
    env:
      stage: 'Prod'
      databaseName: ${{ secrets.databaseName}}
      JDBC: ${{ secrets.JDBC }}
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      displayName: 'Deploy Prod'
      pauseForCodeReview: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

       # Runs the Flyway Clean command within a Docker Container against the Build database
      - name: Echo Commands
        if: ${{ true }}
        run: |
          echo "The Flyway Environment Variable is - Username is $userName - Password is $password - JDBC is $JDBC - And Flyway Command is $FLYWAY"
          echo $env
        
      # Runs the Flyway Migrate command within a Docker Container against the Build database
      - name: Migrate Build DB
        if: ${{ true }}
        run: |
          docker run --rm -v "$GITHUB_WORKSPACE/migrations":/flyway/migrations -v "$GITHUB_WORKSPACE":/flyway/conf $FLYWAY_DOCKER_IMAGE flyway -user="$userName" -password="$password" -licenseKey="$FLYWAY_LICENSE_KEY" info migrate info -url="$JDBC" -cleanDisabled='false'
